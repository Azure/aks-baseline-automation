# This workflow demonstrates building and pushing a container image to an Azure Container Registry.
# The workflow then updates the necessary Kubernetes manifest deployment file so a GitOps operator can sync from the manifest file deploying the application to an Azure Kubernetes Service cluster.
# It is split into separate jobs for readability but could be squashed into a single job if that best suits your scenario.

on: 
  workflow_dispatch:
    inputs:
      Environment:
        description: 'A GitHub Environment to pull action secrets from'
        type: environment
        required: true
      ResourceGroup:
        description: 'Resource Group Name'
        type: string
        required: false
      ExistingACR:
        description: 'Existing ACR Name'
        type: string
        required: false
      ExistingAKS:
        description: 'Existing AKS Name'
        required: false
  pull_request:
    inputs:
        Environment:
          description: 'A GitHub Environment to pull action secrets from'
          type: environment
          required: true
        ResourceGroup:
          description: 'Resource Group Name'
          type: string
          required: false
        ExistingACR:
          description: 'Existing ACR Name'
          type: string
          required: false
        ExistingAKS:
          description: 'Existing AKS Name'
          required: false
  push:
    

env:
  DefaultResourcePrefix: "gitopsapp1"
  ResourceGroupName: ${{ github.event.inputs.ResourceGroup }}
  # description: 'The Resource Group where your resources are deployed'
  Region: "eastus2"
  # description: Region to be used
  AKSName: ${{ github.event.inputs.ExistingAKS }}
  # description: 'The Name of the AKS resource'
  ACRName: ${{ github.event.inputs.ExistingACR }}
  # description: 'The Name of the ACR resource'
  # note: ensure this is lowercase.
  AppName: azure-vote
  # description: 'The Name of the Application to deploy'
  # note: ensure this is lowercase.
  Namespace: "default"
  # description: 'The Kubernetes Namespace to deploy the Application to'
  # default: "default"
  # note: ensure this is lowercase.
  AppRepo: azure-samples/azure-voting-app-redis
  # description: 'The GitHub App code repo'
  # default: "azure-samples/azure-voting-app-redis"
  # note: you can host app code in your repo.
  AppRepoREF: "129888"
  # description: 'The GitHub REF to use when referencing the App code repo'
  # default: "129888"
  # optional
  AppRepoPATH: ./azure-vote
  # description: 'The directory in the repo containing the Dockerfile'
  # default: "./azure-vote"
  Environment: "dev"
  # description: 'A GitHub Environment to pull action secrets from'
  # optional. Use if app repo is different from repo that GitHub Actions workflow is running from.
  ACRRgName: ""
  # description: 'Resource Group of the Azure Container Registry'

permissions:
      id-token: write
      contents: write

jobs:
  BuildPush:
    environment: dev
    runs-on: ubuntu-latest
    steps:
      - name: Get application code from repo
        uses: actions/checkout@v2
      
      # Logs into your Azure subscription
      - uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Run Azure PowerShell script to create necessary resources
        id: create-resources
        uses: azure/powershell@v1
        with:
          inlineScript: |
            cd IaC/scripts
            ./createAppInfra.ps1 -ResourceGroupName ${{ env.ResourceGroupName }} -ACRName ${{ env.ACRName }} -AKSName ${{ env.AKSName }} -Location ${{ env.Region }} -DefaultPrefix ${{ env.DefaultResourcePrefix }}
          azPSVersion: "latest"
      
      - name: Get ACR Password
        id: acr-pwd
        run: |
          ACR_PASSWORD=$(az acr credential show -g ${{ env.ResourceGroupName }} -n ${{ env.ACRName }} --query passwords[0].value -o tsv)
          echo "::set-output name=password::$ACR_PASSWORD"
  
      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v2.0
        with:
          resource-group: ${{ env.ResourceGroupName }}
          cluster-name: ${{ env.AKSName }}

      # Creates namespace in your Azure Kubernetes Service cluster's if it does not exist
      - name: Create namespace
        run: |
          namespacePresent=`kubectl get namespace | grep ${{ env.Namespace }} | wc -l`
          if [ $namespacePresent -eq 0 ]
          then
              echo `kubectl create namespace ${{ env.Namespace }}`
          fi

      # Logs into the Azure Container Registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACRName }}.azurecr.io
          username: ${{ env.ACRName }}
          password: ${{ steps.acr-pwd.outputs.password }}
      
      - name: Get application code from repo
        uses: actions/checkout@main
        with:
          repository: ${{ env.AppRepo}}
          ref: ${{ env.AppRepoREF}}

      # Builds and Pushes the container image to the Azure Container Registry (ACR)
      - name: Container build and push to a Azure Container Registry (ACR)
        env:
          AppRepoPATH: "${{ env.AppRepoPATH}}"
          AppName: "${{ env.AppName }}"
        run: |
          cd $AppRepoPATH
          docker build "$GITHUB_WORKSPACE/" -f  "Dockerfile" -t ${{ env.ACRName }}.azurecr.io/${{ env.AppName }}:${{ github.run_number }} --label dockerfile-path=Dockerfile
          docker push ${{ env.ACRName }}.azurecr.io/${{ env.AppName }}:${{ github.run_number }}

  Update-K8s-Manifests:
    name: Update K8s Deployment Manifest with Image Version
    needs: BuildPush
    environment: dev
    runs-on: ubuntu-latest
    steps:

    # Checks out the git repository
    - uses: actions/checkout@v2

    # Logs into your Azure subscription
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true

    - name: Update image name in manifest file
      uses: azure/powershell@v1
      with:
        inlineScript: |
          $line = Get-Content workloads/azure-vote/front-deployment.yml | Select-String image: | Select-Object -ExpandProperty Line
          $content = Get-Content workloads/azure-vote/front-deployment.yml
          $content | ForEach-Object {$_ -replace $line,"        image: ${{ env.ACRName }}.azurecr.io/${{ env.AppName }}:${{ github.run_number }}"} | Set-Content workloads/azure-vote/front-deployment.yml
        azPSVersion: "latest"

    # Commits the changes to the git repository
    - uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Update image version in K8s Deployment manifests file
