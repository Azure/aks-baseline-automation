# This workflow demonstrates building and pushing a container image to an Azure Container Registry.
# The workflow then updates the necessary Kubernetes manifest deployment file so a GitOps operator can sync from the manifest file deploying the application to an Azure Kubernetes Service cluster.
# It is split into separate jobs for readability but could be squashed into a single job if that best suits your scenario.
#
on: [push]

env:
  RG: CICD-AKS-Temp-5-12-22-01-RG
  # description: 'The Resource Group where your resources are deployed'
  REGIONLOCATION: "EAST US"
  # description: Region to be used
  AKSNAME: CICD-AKS-Temp-5-12-22-01
  # description: 'The Name of the AKS resource'
  ACRNAME: acr6222
  # description: 'The Name of the ACR resource'
  APPNAME: azvoteapp02
  # description: 'The Name of the Application to deploy'
  NAMESPACE: azvoteapp02-ns
  # description: 'The Kubernetes Namespace to deploy the Application to'
  # default: "default"
  APPREPO: buchatech/aks-baseline-automation-bu
  # description: 'The GitHub App code repo'
  # default: "azure-samples/azure-voting-app-redis"
  APPREPOREF: N/A
  # description: 'The GitHub REF to use when referencing the App code repo'
  # default: "129888"
  APPREPOPATH: ./azure-vote
  # description: 'The directory in the repo containing the Dockerfile'
  # default: "./azure-vote"
  ENVIRONMENT: buchatech/aks-baseline-automation-bu
  # description: 'A GitHub Environment to pull action secrets from'
  ACRRGNAME: 51822acrbb45-rg
  # description: 'Resource Group of the Azure Container Registry'

permissions:
      id-token: write
      contents: write

jobs:
  BuildPush:
    runs-on: ubuntu-latest
    steps:
      - name: Get application code from repo
        uses: actions/checkout@main
        # Was not working with azure-samples/azure-voting-app-redis
        ## with:
        ##   repository: ${{ env.APPREPO}}
        ##   ref: ${{ env.APPREPOREF}}

      - name: Job parameter inspection
        run: |
          echo "RG is ${{ env.RG }}"
          echo "AKS name is ${{ env.AKSNAME }}"
          echo "ACR name is ${{ env.ACRNAME }}"

      # Logs into your Azure subscription
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Create Azure Container Registry (ACR) if it does not exist
      - name: Azure Container Registry (ACR)
        id: create-acr
        run: |
          az acr create -n ${{ env.ACRNAME }} -g ${{ env.ACRRGNAME }} --location "${{ env.REGIONLOCATION }}" --sku Standard --admin-enabled
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.ACRNAME }} --query username | xargs`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.ACRNAME }} --query passwords[0].value | xargs`"
          echo "::add-mask::`az acr credential show -n ${{ env.ACRNAME }} --query passwords[0].value | xargs`"

      # Logs into the Azure Container Registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACRNAME }}.azurecr.io
          username: ${{ env.ACRNAME }}
          password: ${{ steps.create-acr.outputs.acr_password }}

      # Builds and Pushes the container image to the Azure Container Registry (ACR)
      - name: Container build and push to a Azure Container Registry (ACR)
        env:
          APPREPOPATH: "${{ env.APPREPOPATH}}"
          APPNAME: "${{ env.APPNAME }}"
        run: |
          cd $APPREPOPATH
          docker build "$GITHUB_WORKSPACE/" -f  "Dockerfile" -t ${{ env.ACRNAME }}.azurecr.io/${{ env.APPNAME }}:${{ github.run_number }} --label dockerfile-path=Dockerfile
          docker push ${{ env.ACRNAME }}.azurecr.io/${{ env.APPNAME }}:${{ github.run_number }}

  Create-ACR-Secret-in-K8s-:
      name: Create a K8s secret for ACR in the AKS cluster
      needs: BuildPush
      runs-on: ubuntu-latest
      steps:
    
    # Logs into your Azure subscription
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Retrieves the credentials for pulling images from your Azure Container Registry
      - name: Get ACR credentials
        run: |
          az acr update -n ${{ env.ACRNAME }} -g ${{ env.ACRRGNAME }} --admin-enabled true
          ACR_USERNAME=$(az acr credential show -g ${{ env.ACRRGNAME }} -n ${{ env.ACRNAME }} --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show -g ${{ env.ACRRGNAME }} -n ${{ env.ACRNAME }} --query passwords[0].value -o tsv)
          echo "::add-mask::${{ env.ACRNAME }}"
          echo "::set-output name=username::${{ env.ACRNAME }}"
          echo "::add-mask::${ACR_PASSWORD}"
          echo "::set-output name=password::${ACR_PASSWORD}"
        id: get-acr-creds

    # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v2.0
        with:
          resource-group: ${{ env.RG }}
          cluster-name: ${{ env.AKSNAME }}

    # Creates namespace in your Azure Kubernetes Service cluster's if it does not exist
      - name: Create namespace
        run: |
          namespacePresent=`kubectl get namespace | grep ${{ env.NAMESPACE }} | wc -l`
          if [ $namespacePresent -eq 0 ]
          then
              echo `kubectl create namespace ${{ env.NAMESPACE }}`
          fi
         
      - uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ env.NAMESPACE }}
          container-registry-url: ${{ env.ACRNAME }}.azurecr.io
          container-registry-username: ${{ env.ACRNAME }} 
          container-registry-password: ${ACR_PASSWORD}
          secret-name: ${{ env.ACRNAME }}-secret

  Update-K8s-Manifests:
      name: Update K8s Deployment Manifest with Image Version
      needs: BuildPush
      runs-on: ubuntu-latest
      steps:

    # Checks out the git repository
      - uses: actions/checkout@v2

    # Updates the Kubernetes deployment manifest file with the image version hosted in ACR
      - name: Update Image Version
        id: imgupd
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.spec.template.spec.containers[0].image = "${{ env.ACRNAME }}.azurecr.io/${{ env.APPNAME }}:${{ github.run_number }}"' -i workloads/azure-vote/front-deployment.yml

    # Updates the Kubernetes deployment manifest file with the Kubernetes secret used for connecting to the ACR
      - name: Update Image Pull Secret Name
        id: imgpullsecret
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.spec.template.spec.imagePullSecrets[0].name = "${{ env.ACRNAME }}-secret"' -i workloads/azure-vote/front-deployment.yml

    # Commits the changes to the git repository
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update image version in K8s Deployment manifests file
