# Steve Buchanan Update In Progress
# This workflow demonstrates building a container image, pushing to an Azure Container Registry and deploying to Kubernetes
# It is split into separate jobs for readability but could be squashed into a single job if that best suits your scenario
#workflow_call
on: [push]
env:
  RG: CICD-AKS-Temp-5-12-22-01-RG
  # description: 'The Resource Group where your resources are deployed'
  # required: true
  # type: string
  AKSNAME: CICD-AKS-Temp-5-12-22-01
  # description: 'The Name of the AKS resource'
  # required: true
  # type: string
  ACRNAME: acr6222
  # description: 'The Name of the ACR resource'
  # required: true
  # type: string
  APPNAME: azvoteapp02
  # description: 'The Name of the Application to deploy'
  # required: true
  # type: string
  NAMESPACE: azvoteapp02-ns
  # description: 'The Kubernetes Namespace to deploy the Application to'
  # default: "default"
  # required: false
  # type: string
  APPREPO: https://github.com/Azure-Samples/azure-voting-app-redis
  # description: 'The GitHub App code repo'
  # default: "azure-samples/azure-voting-app-redis"
  # required: false
  # type: string
  APPREPOREF: test
  # description: 'The GitHub REF to use when referencing the App code repo'
  # default: "129888"
  # required: false
  # type: string
  APPREPOPATH: ./azure-vote
  # description: 'The directory in the repo containing the Dockerfile'
  # default: "./azure-vote"
  # required: false
  # type: string
  ENVIRONMENT: https://github.com/Buchatech/aks-baseline-automation-bu
  # description: 'A GitHub Environment to pull action secrets from'
  # required: true
  # type: string
  ACRRG_NAME: 51822acrbb45-rg
  # description: 'Resource Group of the Azure Container Registry'
  # required: true
  # type: string

# secrets:
#       AZURE_CLIENT_ID:
#         required: true
#       AZURE_TENANT_ID:
#         required: true
#       AZURE_SUBSCRIPTION_ID:
#         required: true
#       AZURE_CREDENTIALS:
#         required: true

permissions:
      id-token: write
      contents: read

jobs:
  BuildPush:
    runs-on: ubuntu-latest
    environment: ${{ env.ENVIRONMENT }}
    env:
      ACRNAME: "${{ env.ACRNAME}}"

    steps:
      - name: Get application code from repo
        uses: actions/checkout@v2
        with:
          repository: ${{ env.APPREPO}}
          ref: ${{ env.APPREPOREF}}

      - name: Job parameter inspection
        run: |
          echo "RG is ${{ env.RG }}"
          echo "AKS name is ${{ env.AKSNAME }}"
          echo "ACR name is ${{ env.ACRNAME }}"

      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Connect to Azure Container Registry (ACR)
        id: acrconnect
        run: |
          echo "Retrieving access token from $ACRNAME"
          TOKEN=$(az acr login -n $ACRNAME --expose-token)

          if [ -z "$TOKEN" ]
          then
            echo "ACR Token was not retrieved successfully"
            exit 1
          fi

          ACRTOKEN=$(echo $TOKEN | jq -r ".accessToken")
          LOGINSERVER=$(echo $TOKEN | jq -r ".loginServer")

          echo "ACR Login Server: $LOGINSERVER"
          echo "::set-output name=loginServer::$LOGINSERVER"

          echo "Passing token as stdin to docker login"
          echo $ACRTOKEN | docker login $LOGINSERVER -u 00000000-0000-0000-0000-000000000000 --password-stdin

      - name: Container build and push to a Azure Container Registry (ACR)
        env:
          APPREPOPATH: "${{ env.APPREPOPATH}}"
          ACRSERVER: "${{ steps.acrconnect.outputs.loginServer }}"
          APPNAME: "${{ env.APPNAME }}"
        run: |
          cd $APPREPOPATH
          docker build . -t $ACRSERVER/$APPNAME:${{ github.sha }}
          docker push $ACRSERVER/$APPNAME:${{ github.sha }}

  Create-ACR-Secret-in-K8s-:
    name: Create a K8s secret for ACR in the AKS cluster
    needs: Build-and-Push
    runs-on: ubuntu-latest
    steps:
    
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Retrieves the credentials for pulling images from your Azure Container Registry
    - name: Get ACR credentials
      run: |
        az acr update -n ${{ env.ACRNAME }} -g ${{ env.ACRRG_NAME }} --admin-enabled true
        ACR_USERNAME=$(az acr credential show -g ${{ env.ACRRG_NAME }} -n ${{ env.ACRNAME }} --query username -o tsv)
        ACR_PASSWORD=$(az acr credential show -g ${{ env.ACRRG_NAME }} -n ${{ env.ACRNAME }} --query passwords[0].value -o tsv)
        echo "::add-mask::${{ env.ACRNAME }}"
        echo "::set-output name=username::${{ env.ACRNAME }}"
        echo "::add-mask::${ACR_PASSWORD}"
        echo "::set-output name=password::${ACR_PASSWORD}"
      id: get-acr-creds

    # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
    - name: Get K8s context
      uses: azure/aks-set-context@v2.0
      with:
        resource-group: ${{ env.RG }}
        cluster-name: ${{ env.AKS_NAME }}

    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep ${{ env.NAMESPACE }} | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace ${{ env.NAMESPACE }}`
        fi
         
    - uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        container-registry-url: ${{ env.ACRNAME }}.azurecr.io
        container-registry-username: ${{ env.ACRNAME }} 
        container-registry-password: ${ACR_PASSWORD}
        secret-name: ${{ env.ACRNAME }}-secret

  Update-K8s-Manifests:
    name: Update K8s Deployment Manifest with Image Version
    needs: Build-and-Push
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: Update Image Version
      id: imgupd
      uses: mikefarah/yq@master
      with:
        cmd: yq eval '.spec.template.spec.containers[0].image = "${{ env.ACRNAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.run_number }}"' -i workloads/azure-vote/front-deployment.yml

    - name: Update Image Pull Secret Name
      id: imgpullsecret
      uses: mikefarah/yq@master
      with:
        cmd: yq eval '.spec.template.spec.imagePullSecrets[0].name = "${{ env.ACRNAME }}-secret"' -i workloads/azure-vote/front-deployment.yml

    - uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Update image version in K8s Deployment manifests file

  ## Deploy:
    # runs-on: ubuntu-latest
    # environment: ${{ inputs.ENVIRONMENT }}
    # needs: [BuildPush]

    # steps:
    #   - name: Get application k8s manifests from repo
    #     uses: actions/checkout@v2

    #   - name: Azure Login
    #     uses: Azure/login@v1.4.3
    #     with:
    #       client-id: ${{ secrets.AZURE_CLIENT_ID }}
    #       tenant-id: ${{ secrets.AZURE_TENANT_ID }}
    #       subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    #   - name: Install Kubectl
    #     uses: azure/setup-kubectl@v2.0
    #     with:
    #         version: 'latest'

    #   - name: Set the target Azure Kubernetes Service (AKS) cluster.
    #     uses: azure/aks-set-context@v2.0
    #     with:
    #       cluster-name: ${{ inputs.AKSNAME }}
    #       resource-group: ${{ inputs.RG }}

    #   - name: Kubelogin
    #     env:
    #       kubeloginversion: 'v0.0.11'
    #     run: |
    #       wget https://github.com/Azure/kubelogin/releases/download/${{ env.kubeloginversion }}/kubelogin-linux-amd64.zip
    #       unzip kubelogin-linux-amd64.zip
    #       sudo mv bin/linux_amd64/kubelogin /usr/bin
    #       kubelogin convert-kubeconfig -l azurecli

    #   - name: Deploy app to AKS
    #     uses: azure/k8s-deploy@v1.5
    #     env:
    #       ACRNAME: "${{ inputs.ACRNAME}}"
    #     with:
    #       manifests: |
    #         workloads/azure-vote/back-deployment.yml
    #         workloads/azure-vote/back-service.yml
    #         workloads/azure-vote/front-deployment.yml
    #         workloads/azure-vote/front-service.yml
    #       images: |
    #         ${{ env.ACRNAME }}.azurecr.io/azure-vote-front:${{ github.sha }}
    #       namespace: ${{ inputs.NAMESPACE }}
