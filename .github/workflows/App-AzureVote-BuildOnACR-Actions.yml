# This workflow demonstrates ACR building and storing a container image, and deploying to Kubernetes
# It is split into separate jobs for readability but could be squashed into a single job if that best suits your scenario

on:
  workflow_call:
    inputs:
      RG:
        required: true
        type: string
      AKSNAME:
        required: true
        type: string
      ACRNAME:
        required: true
        type: string
      APPNAME:
        required: true
        type: string
      NAMESPACE:
        default: "default"
        required: false
        type: string
      APPREPO:
        default: "azure-samples/azure-voting-app-redis"
        required: false
        type: string
      APPREPOREF:
        default: "129888"
        required: false
        type: string
      APPREPOPATH:
        default: "./azure-vote"
        required: false
        type: string
        description: The directory in the repo containing the Dockerfile
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

permissions:
      id-token: write
      contents: read

jobs:
  BuildPush:
    runs-on: ubuntu-latest
    env:
      APPNAME: "${{ inputs.APPNAME }}"
      ACRNAME: "${{ inputs.ACRNAME}}"
      RG: "${{ inputs.RG }}"

    steps:
      - name: Get application code from repo
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.APPREPO}}
          ref: ${{ inputs.APPREPOREF}}

      - name: Job parameter inspection
        run: |
          echo "RG is ${{ inputs.RG }}"
          echo "AKS name is ${{ inputs.AKSNAME }}"

      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Debugging
        run: |
          echo "Debugging"
          az acr list

      - name: ACR build
        id: acrbuild
        env:
          ACRSERVER: "${{ env.ACRNAME }}.azurecr.io"
          APPREPOPATH: "${{ inputs.APPREPOPATH}}"
          IMAGEREPO: "${{ inputs.APPNAME }}"
        run: |
          echo "Verifying directory contents in repo path $APPREPOPATH"
          ls $APPREPOPATH

          echo "Downcasing $ACRSERVER for valid repository name"
          REPOSITORY=$(echo $ACRSERVER | tr '[:upper:]' '[:lower:]')

          echo "Requesting ACR build on $ACRSERVER for image $IMAGEREPO:${{ github.sha }}"
          az acr build -t $REPOSITORY/$IMAGEREPO:${{ github.sha }} -r $ACRNAME $APPREPOPATH/.

  Deploy:
    runs-on: ubuntu-latest
    needs: [BuildPush]
    env:
      APPNAME: "${{ inputs.APPNAME }}"
      NAMESP: "${{ inputs.NAMESPACE }}"
      AKSNAME: "${{ inputs.AKSNAME}}"
      ACRNAME: "${{ inputs.ACRNAME}}"
      RG: "${{ inputs.RG }}"

    steps:
      - name: Get application k8s manifests from repo
        uses: actions/checkout@v2

      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Kubectl
        uses: azure/setup-kubectl@v2.0
        with:
            version: 'latest'

      - name: Set the target Azure Kubernetes Service (AKS) cluster.
        uses: azure/aks-set-context@v2.0
        with:
          cluster-name: ${{ inputs.AKSNAME }}
          resource-group: ${{ inputs.RG }}

      #It's not clear why aks-set-context isn't doing a kubelogin.... but hey ho...
      - name: Kubelogin
        env:
          kubeloginversion: 'v0.0.10'
        run: |
          wget https://github.com/Azure/kubelogin/releases/download/${{ env.kubeloginversion }}/kubelogin-linux-amd64.zip
          unzip kubelogin-linux-amd64.zip
          sudo mv bin/linux_amd64/kubelogin /usr/bin
          kubelogin convert-kubeconfig -l azurecli

      - name: Deploy app to AKS
        uses: azure/k8s-deploy@v1.5
        env:
          ACRNAME: "${{ inputs.ACRNAME}}"
        with:
          manifests: |
            workloads/azure-vote/back-deployment.yml
            workloads/azure-vote/back-service.yml
            workloads/azure-vote/front-deployment.yml
            workloads/azure-vote/front-service.yml
          images: |
            ${{ env.ACRNAME }}.azurecr.io/azure-vote-front:${{ github.sha }}
          namespace: ${{ inputs.NAMESPACE }}
          action: deploy
